import { DynamicByteSequence, QuadByte, Register, VariableRegisterReference, Byte, TriByte, DoubleByte } from '@allium/types';
import { ExecOutput } from './exec-output';

export interface InstructionExecutor {
    ADD(accumulatorValue: DynamicByteSequence, varValue: DynamicByteSequence): ExecOutput;
    SUB(accumulatorValue: QuadByte, varValue: DynamicByteSequence): ExecOutput;
    MULT(accumulatorValue: QuadByte, varValue: DynamicByteSequence): ExecOutput;
    DIV(accumulatorValue: QuadByte, varValue: DynamicByteSequence): ExecOutput;
    MOD(accumulatorValue: QuadByte, varValue: DynamicByteSequence): ExecOutput;
    ADDF(accumulatorValue: QuadByte, varValue: QuadByte): ExecOutput;
    SUBF(accumulatorValue: QuadByte, varValue: QuadByte): ExecOutput;
    MULTF(accumulatorValue: QuadByte, varValue: QuadByte): ExecOutput;
    DIVF(accumulatorValue: QuadByte, varValue: QuadByte): ExecOutput;
    FLOORF(lvalue: QuadByte, destinationRegister: Register): ExecOutput;
    CEILF(lvalue: QuadByte, destinationRegister: Register): ExecOutput;
    ROUNDF(lvalue: QuadByte, destinationRegister: Register): ExecOutput;
    ADDV(accumulatorValue: QuadByte, varValue: DynamicByteSequence): ExecOutput;
    SUBV(accumulatorValue: QuadByte, varValue: DynamicByteSequence): ExecOutput;
    MULTV(accumulatorValue: QuadByte, varValue: DynamicByteSequence): ExecOutput;
    DIVV(accumulatorValue: QuadByte, varValue: DynamicByteSequence): ExecOutput;
    MODV(accumulatorValue: QuadByte, varValue: DynamicByteSequence): ExecOutput;
    EQV(lvalue: DynamicByteSequence, rvalue: DynamicByteSequence, destinationRegister: VariableRegisterReference): ExecOutput;
    GTV(lvalue: DynamicByteSequence, rvalue: DynamicByteSequence, destinationRegister: VariableRegisterReference): ExecOutput;
    LTV(lvalue: DynamicByteSequence, rvalue: DynamicByteSequence, destinationRegister: VariableRegisterReference): ExecOutput;
    MEMREAD(memoryValue: Byte, destRegister: VariableRegisterReference): ExecOutput;
    MEMREAD_Q(memoryValue: QuadByte, destRegister: VariableRegisterReference): ExecOutput;
    MEMREAD_X(memoryValue: TriByte, destRegister: VariableRegisterReference): ExecOutput;
    MEMREAD_D(memoryValue: DoubleByte, destRegister: VariableRegisterReference): ExecOutput;
    MEMWRITE(address: QuadByte, byteValue: Byte): ExecOutput;
    MEMWRITE_Q(address: QuadByte, value: QuadByte): ExecOutput;
    MEMWRITE_X(address: QuadByte, value: TriByte): ExecOutput;
    MEMWRITE_D(address: QuadByte, value: DoubleByte): ExecOutput;
    PUSH(registerValue: Byte, stackAddress: QuadByte): ExecOutput;
    PUSH_Q(registerValue: QuadByte, stackAddress: QuadByte): ExecOutput;
    PUSH_X(registerValue: TriByte, stackAddress: QuadByte): ExecOutput;
    PUSH_D(registerValue: DoubleByte, stackAddress: QuadByte): ExecOutput;
    IPUSH(inlineValue: Byte, stackAddress: QuadByte): ExecOutput;
    IPUSH_Q(inlineValue: QuadByte, stackAddress: QuadByte): ExecOutput;
    IPUSH_X(inlineValue: TriByte, stackAddress: QuadByte): ExecOutput;
    IPUSH_D(inlineValue: DoubleByte, stackAddress: QuadByte): ExecOutput;
    POP(destinationRegister: VariableRegisterReference, stackAddress: QuadByte): ExecOutput;
    POP_Q(destinationRegister: VariableRegisterReference, stackAddress: QuadByte): ExecOutput;
    POP_X(destinationRegister: VariableRegisterReference, stackAddress: QuadByte): ExecOutput;
    POP_D(destinationRegister: VariableRegisterReference, stackAddress: QuadByte): ExecOutput;
    LOAD_MONDAY(varValue: DynamicByteSequence): ExecOutput;
    LOAD_TUESDAY(varValue: DynamicByteSequence): ExecOutput;
    LOAD_WEDNESDAY(varValue: DynamicByteSequence): ExecOutput;
    LOAD_THURSDAY(varValue: DynamicByteSequence): ExecOutput;
    LOAD_FRIDAY(varValue: DynamicByteSequence): ExecOutput;
    LOAD_ACCUMULATOR(varValue: DynamicByteSequence): ExecOutput;
    LOAD_INSPTR(varValue: DynamicByteSequence): ExecOutput;
    LOAD_G7(varValue: DynamicByteSequence): ExecOutput;
    LOAD_G8(varValue: DynamicByteSequence): ExecOutput;
    LOAD_G9(varValue: DynamicByteSequence): ExecOutput;
    LOAD_G10(varValue: DynamicByteSequence): ExecOutput;
    LOAD_G11(varValue: DynamicByteSequence): ExecOutput;
    LOAD_G12(varValue: DynamicByteSequence): ExecOutput;
    LOAD_G13(varValue: DynamicByteSequence): ExecOutput;
    LOAD_G14(varValue: DynamicByteSequence): ExecOutput;
    LOAD_STKPTR(varValue: DynamicByteSequence): ExecOutput;
    COPY(srcRegisterValue: DynamicByteSequence, destRegister: VariableRegisterReference): ExecOutput;
    INC(registerValue: DynamicByteSequence, register: VariableRegisterReference): ExecOutput;
    DEC(registerValue: DynamicByteSequence, register: VariableRegisterReference): ExecOutput;
    BITAND(accumulatorValue: QuadByte, varValue: DynamicByteSequence): ExecOutput;
    BITOR(accumulatorValue: QuadByte, varValue: DynamicByteSequence): ExecOutput;
    BITXOR(accumulatorValue: QuadByte, varValue: DynamicByteSequence): ExecOutput;
    BITLSHIFT(accumulatorValue: QuadByte, shiftAmount: DynamicByteSequence): ExecOutput;
    BITRSHIFT(accumulatorValue: QuadByte, shiftAmount: DynamicByteSequence): ExecOutput;
    BITNOT(accumulatorValue: QuadByte): ExecOutput;
    EQ(lvalue: DynamicByteSequence, rvalue: DynamicByteSequence, destinationRegister: VariableRegisterReference): ExecOutput;
    GT(lvalue: DynamicByteSequence, rvalue: DynamicByteSequence, destinationRegister: VariableRegisterReference): ExecOutput;
    LT(lvalue: DynamicByteSequence, rvalue: DynamicByteSequence, destinationRegister: VariableRegisterReference): ExecOutput;
    JMP(destinationAddress: QuadByte): ExecOutput;
    JNZ(varValue: DynamicByteSequence, destinationAddress: QuadByte): ExecOutput;
    JZ(varValue: DynamicByteSequence, destinationAddress: QuadByte): ExecOutput;
    JMPI(inlineDestinationAddress: QuadByte): ExecOutput;
    JNZI(varValue: DynamicByteSequence, inlineDestinationAddress: TriByte): ExecOutput;
    JZI(varValue: DynamicByteSequence, inlineDestinationAddress: TriByte): ExecOutput;
    FLAG_ACK(destRegister: VariableRegisterReference, flagCode: DynamicByteSequence): ExecOutput;
    ABSV(srcRegisterValue: DynamicByteSequence, destRegister: VariableRegisterReference): ExecOutput;
    NEGV(srcRegisterValue: DynamicByteSequence, destRegister: VariableRegisterReference): ExecOutput;
    VEC(srcRegisterValue: DynamicByteSequence, destRegister: VariableRegisterReference): ExecOutput;
    VEC_NEG(srcRegisterValue: DynamicByteSequence, destRegister: VariableRegisterReference): ExecOutput;
    MAG(srcRegisterValue: DynamicByteSequence, destRegister: VariableRegisterReference): ExecOutput;
    LOAD_D(destinationRegister: VariableRegisterReference, inlineValue: DoubleByte): ExecOutput;
    LOAD_B(destinationRegister: VariableRegisterReference, inlineValue: Byte): ExecOutput;
    LOAD_X(destinationRegister: VariableRegisterReference, inlineValue: TriByte): ExecOutput;
    NO_OP(): ExecOutput;
    ISCAN(channelInfo: Byte, destinationRegister: VariableRegisterReference): ExecOutput;
    OSCAN(channelInfo: Byte, destinationRegister: VariableRegisterReference): ExecOutput;
    IOSTAT(port: Byte, destinationRegister: VariableRegisterReference): ExecOutput;
    IOREAD_B(port: Byte, destinationRegister: VariableRegisterReference): ExecOutput;
    IOREAD_D(port: Byte, destinationRegister: VariableRegisterReference): ExecOutput;
    IOREAD_X(port: Byte, destinationRegister: VariableRegisterReference): ExecOutput;
    IOREAD_Q(port: Byte, destinationRegister: VariableRegisterReference): ExecOutput;
    IOWRITE_B(port: Byte, srcRegisterValue: DynamicByteSequence): ExecOutput;
    IOWRITE_D(port: Byte, srcRegisterValue: DynamicByteSequence): ExecOutput;
    IOWRITE_X(port: Byte, srcRegisterValue: DynamicByteSequence): ExecOutput;
    IOWRITE_Q(port: Byte, srcRegisterValue: DynamicByteSequence): ExecOutput;
    IOFLUSH(port: Byte): ExecOutput;
    PERF_INFO(destinationRegister: VariableRegisterReference): ExecOutput;
    MODEL_INFO(destinationRegister: VariableRegisterReference): ExecOutput;
    SERIAL_NUMBER(destinationRegister: VariableRegisterReference): ExecOutput;
    TICKS(destinationRegister: VariableRegisterReference): ExecOutput;
    MEMSIZE(destinationRegister: VariableRegisterReference): ExecOutput;
    FLAGS(destinationRegister: VariableRegisterReference): ExecOutput;
    IODEV_IDP(port: Byte, destinationRegister: VariableRegisterReference): ExecOutput;
    IODEV_IDS(port: Byte, destinationRegister: VariableRegisterReference): ExecOutput;
    IODEV_CLS(port: Byte, destinationRegister: VariableRegisterReference): ExecOutput;
    IODEV_CLSX(port: Byte, destinationRegister: VariableRegisterReference): ExecOutput;
    END(): ExecOutput;
}
